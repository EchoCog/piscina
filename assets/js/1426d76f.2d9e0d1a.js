"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2163],{5933:(e,t,r)=>{r.d(t,{TF:()=>s});var n=r(4848),a=r(8453);const s=()=>{const e={code:"code",pre:"pre",...(0,a.R)()};return(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-js",title:"workerWrapper.js",children:'const { workerData } = require(\'worker_threads\');\n\nif (workerData.fullpath.endsWith(".ts")) {\nrequire("ts-node").register();\n}\nmodule.exports = require(workerData.fullpath);\n'})})}},3086:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>h});var n=r(4848),a=r(8453),s=r(5933),i=r(1470),o=r(9365);const l={id:"Web Streams",sidebar_position:20},c=void 0,u={id:"examples/Web Streams",title:"Web Streams",description:"You can work with modern Web APIs like Web Streams using Piscina. Web Streams enable efficient processing of streaming data across multiple threads. It's particularly useful for scenarios involving large datasets or real-time data processing where the benefits of multi-threading can be significant.",source:"@site/docs/examples/webstreams.mdx",sourceDirName:"examples",slug:"/examples/Web Streams",permalink:"/piscina/examples/Web Streams",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{id:"Web Streams",sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Typescript",permalink:"/piscina/examples/Typescript"},next:{title:"Web Streams Transfer",permalink:"/piscina/examples/Web Streams Transfer"}},d={},h=[];function m(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["You can work with modern Web APIs like ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API",children:"Web Streams"})," using Piscina. Web Streams enable efficient processing of streaming data across multiple threads. It's particularly useful for scenarios involving large datasets or real-time data processing where the benefits of multi-threading can be significant."]}),"\n",(0,n.jsxs)(t.p,{children:["In the main script (",(0,n.jsx)(t.code,{children:"index.mjs"}),"), we create a Piscina instance and set up a ",(0,n.jsx)(t.code,{children:"ReadableStream"})," that generates a sequence of numbers. We also create a ",(0,n.jsx)(t.code,{children:"WritableStream"})," that simply logs each chunk it receives. The script then runs a task in the worker pool, passing both streams as arguments."]}),"\n",(0,n.jsxs)(t.p,{children:["The worker script (",(0,n.jsx)(t.code,{children:"worker.mjs"}),") defines an async function that reads from the provided ",(0,n.jsx)(t.code,{children:"ReadableStream"})," and writes to the ",(0,n.jsx)(t.code,{children:"WritableStream"}),". It uses a for-await loop to iterate over the chunks in the ",(0,n.jsx)(t.code,{children:"ReadableStream"}),", writing each chunk to the ",(0,n.jsx)(t.code,{children:"WritableStream"}),"."]}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsxs)(o.A,{value:"Javascript",children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",metastring:'title="worker.mjs"',children:"export default async function ({ readable, writable }) {\n  const writer = writable.getWriter();\n  for await (const chunk of readable) {\n    await writer.write(chunk);\n  }\n  writer.close();\n}\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",metastring:'title="index.mjs"',children:"import Piscina from 'piscina';\nimport {\n  ReadableStream,\n  WritableStream\n} from 'node:stream/web';\n\nconst pool = new Piscina({\n  filename: new URL('./worker.mjs', import.meta.url).href\n});\n\nconst readable = new ReadableStream({\n  start () {\n    this.chunks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n  },\n\n  pull (controller) {\n    const chunk = this.chunks.shift();\n    controller.enqueue(chunk);\n    if (this.chunks.length === 0) {\n      controller.close();\n    }\n  }\n});\n\nconst writable = new WritableStream({\n  write (chunk) {\n    console.log(chunk);\n  }\n});\n\n(async function () {\n  await pool.run({ readable, writable }, { transferList: [readable, writable] });\n})()\n\n"})})]}),(0,n.jsxs)(o.A,{value:"Typescript",children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:'title="worker.ts"',children:"import { ReadableStream, WritableStream } from 'node:stream/web';\n\nexport default async function ({ readable, writable }: { readable: ReadableStream, writable: WritableStream }): Promise<void> {\n  const writer = writable.getWriter();\n  for await (const chunk of readable) {\n    await writer.write(chunk);\n  }\n  writer.close();\n}\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",metastring:'title="index.ts"',children:"import { resolve } from 'path';\nimport Piscina from 'piscina';\nimport {\n  ReadableStream,\n  WritableStream\n} from 'node:stream/web';\nimport { filename } from './worker';\n\nconst pool = new Piscina({\n  filename: resolve(__dirname, 'workerWrapper.js'),\n  workerData: { fullpath: filename },\n});\n\nconst readable = new ReadableStream({\n  start () {\n    this.chunks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n  },\n\n  pull (controller) {\n    const chunk = this.chunks.shift();\n    controller.enqueue(chunk);\n    if (this.chunks.length === 0) {\n      controller.close();\n    }\n  }\n});\n\nconst writable = new WritableStream({\n  write (chunk) {\n    console.log(chunk);\n  }\n});\n(async function () {\n  await pool.run({ readable, writable }, { transferList: [readable, writable] });\n})()\n"})}),(0,n.jsx)(s.TF,{})]})]}),"\n",(0,n.jsxs)(t.p,{children:["A key aspect of this example is the use of the ",(0,n.jsx)(t.code,{children:"transferList"})," option when running the task. This allows the ",(0,n.jsx)(t.code,{children:"ReadableStream"})," and ",(0,n.jsx)(t.code,{children:"WritableStream"})," instances to be transferred to the worker thread, rather than cloned. This is crucial for maintaining the integrity of the streams across threads."]}),"\n",(0,n.jsxs)(t.p,{children:["You can also check out this example on ",(0,n.jsx)(t.a,{href:"https://github.com/piscinajs/piscina/tree/current/examples/webstreams",children:"github"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},9365:(e,t,r)=>{r.d(t,{A:()=>i});r(6540);var n=r(4164);const a={tabItem:"tabItem_Ymn6"};var s=r(4848);function i(e){let{children:t,hidden:r,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,i),hidden:r,children:t})}},1470:(e,t,r)=>{r.d(t,{A:()=>j});var n=r(6540),a=r(4164),s=r(3104),i=r(6347),o=r(205),l=r(7485),c=r(1682),u=r(679);function d(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}(r);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:r}=e;const a=(0,i.W6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l.aZ)(s),(0,n.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function b(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,s=h(e),[i,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[c,d]=p({queryString:r,groupId:a}),[b,f]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,u.Dv)(r);return[a,(0,n.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:a}),w=(()=>{const e=c??b;return m({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{w&&l(w)}),[w]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var f=r(2303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(4848);function x(e){let{className:t,block:r,selectedValue:n,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const t=e.currentTarget,r=l.indexOf(t),a=o[r].value;a!==n&&(c(t),i(a))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;t=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;t=l[r]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},t),children:o.map((e=>{let{value:t,label:r,attributes:s}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>l.push(e),onKeyDown:d,onClick:u,...s,className:(0,a.A)("tabs__item",w.tabItem,s?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function v(e){let{lazy:t,children:r,selectedValue:a}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function k(e){const t=b(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",w.tabList),children:[(0,g.jsx)(x,{...t,...e}),(0,g.jsx)(v,{...t,...e})]})}function j(e){const t=(0,f.A)();return(0,g.jsx)(k,{...e,children:d(e.children)},String(t))}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var n=r(6540);const a={},s=n.createContext(a);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);