"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1567],{5226:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/","docId":"Introduction","unlisted":false},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/getting-started/Installation","docId":"getting-started/Installation","unlisted":false},{"type":"link","label":"Basic Usage","href":"/getting-started/Basic Usage","docId":"getting-started/Basic Usage","unlisted":false},{"type":"link","label":"Managing Worker Threads","href":"/getting-started/Managing Worker Threads","docId":"getting-started/Managing Worker Threads","unlisted":false}],"href":"/category/getting-started"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Aborting Tasks","href":"/examples/Aborting Tasks","docId":"examples/Aborting Tasks","unlisted":false},{"type":"link","label":"Async Load","href":"/examples/Async Load","docId":"examples/Async Load","unlisted":false},{"type":"link","label":"Using Typescript with Piscina","href":"/examples/Using Typescript with Piscina","docId":"examples/Using Typescript with Piscina","unlisted":false},{"type":"link","label":"ES Module","href":"/examples/ES Module","docId":"examples/ES Module","unlisted":false},{"type":"link","label":"Message Port","href":"/examples/Message Port","docId":"examples/Message Port","unlisted":false},{"type":"link","label":"Messages","href":"/examples/Messages","docId":"examples/Messages","unlisted":false},{"type":"link","label":"Move","href":"/examples/Move","docId":"examples/Move","unlisted":false},{"type":"link","label":"Multiple Workers","href":"/examples/Multiple Workers","docId":"examples/Multiple Workers","unlisted":false},{"type":"link","label":"Multiple Workers in One File","href":"/examples/Multiple Workers in One File","docId":"examples/Multiple Workers in One File","unlisted":false},{"type":"link","label":"N-API Native Addon","href":"/examples/N-API Native Addon","docId":"examples/N-API Native Addon","unlisted":false},{"type":"link","label":"Named Tasks","href":"/examples/Named Tasks","docId":"examples/Named Tasks","unlisted":false},{"type":"link","label":"Progress","href":"/examples/Progress","docId":"examples/Progress","unlisted":false},{"type":"link","label":"React Server Side Rendering","href":"/examples/React Server Side Rendering","docId":"examples/React Server Side Rendering","unlisted":false},{"type":"link","label":"Resource Limits","href":"/examples/Resource Limits","docId":"examples/Resource Limits","unlisted":false},{"type":"link","label":"Scrypt","href":"/examples/Scrypt","docId":"examples/Scrypt","unlisted":false},{"type":"link","label":"Server","href":"/examples/Server","docId":"examples/Server","unlisted":false},{"type":"link","label":"Simple","href":"/examples/Simple","docId":"examples/Simple","unlisted":false},{"type":"link","label":"Simple Async","href":"/examples/Simple Async","docId":"examples/Simple Async","unlisted":false},{"type":"link","label":"Stream","href":"/examples/Stream","docId":"examples/Stream","unlisted":false},{"type":"link","label":"Stream-In","href":"/examples/Stream-In","docId":"examples/Stream-In","unlisted":false},{"type":"link","label":"Task Queue","href":"/examples/Task Queue","docId":"examples/Task Queue","unlisted":false},{"type":"link","label":"Typescript","href":"/examples/Typescript","docId":"examples/Typescript","unlisted":false},{"type":"link","label":"Web Streams","href":"/examples/Web Streams","docId":"examples/Web Streams","unlisted":false},{"type":"link","label":"Web Streams Transfer","href":"/examples/Web Streams Transfer","docId":"examples/Web Streams Transfer","unlisted":false},{"type":"link","label":"Worker Options","href":"/examples/Worker Options","docId":"examples/Worker Options","unlisted":false}],"href":"/category/examples"},{"type":"category","label":"Advanced topics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Custom Task Queues","href":"/advanced-topics/Custom Task Queues","docId":"advanced-topics/Custom Task Queues","unlisted":false},{"type":"link","label":"Performance Notes","href":"/advanced-topics/Performance Notes","docId":"advanced-topics/Performance Notes","unlisted":false}],"href":"/category/advanced-topics"},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"API Overview","href":"/api-reference/API Overview","docId":"api-reference/API Overview","unlisted":false},{"type":"link","label":"Class","href":"/api-reference/Class","docId":"api-reference/Class","unlisted":false},{"type":"link","label":"Methods","href":"/api-reference/Methods","docId":"api-reference/Methods","unlisted":false},{"type":"link","label":"Events","href":"/api-reference/Events","docId":"api-reference/Events","unlisted":false},{"type":"link","label":"Properties","href":"/api-reference/Properties","docId":"api-reference/Properties","unlisted":false},{"type":"link","label":"Static Properties and Methods","href":"/api-reference/Static Properties and Methods","docId":"api-reference/Static Properties and Methods","unlisted":false},{"type":"link","label":"Interface","href":"/api-reference/Interface","docId":"api-reference/Interface","unlisted":false}],"href":"/category/api-reference"},{"type":"category","label":"Update Log","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ChangeLog","href":"/update-log/changelog","docId":"update-log/changelog","unlisted":false},{"type":"link","label":"Release Notes","href":"/update-log/Release Notes","docId":"update-log/Release Notes","unlisted":false}],"href":"/category/update-log"}]},"docs":{"advanced-topics/Custom Task Queues":{"id":"advanced-topics/Custom Task Queues","title":"Custom Task Queues","description":"By default, Piscina uses a simple array-based first-in-first-out (fifo)","sidebar":"tutorialSidebar"},"advanced-topics/Performance Notes":{"id":"advanced-topics/Performance Notes","title":"Performance Notes","description":"Workers are generally optimized for offloading synchronous,","sidebar":"tutorialSidebar"},"api-reference/API Overview":{"id":"api-reference/API Overview","title":"API Overview","description":"| API                                                                    | Description                                                                                                                                                                                                                                                                                         |","sidebar":"tutorialSidebar"},"api-reference/Class":{"id":"api-reference/Class","title":"Class","description":"Class: Piscina","sidebar":"tutorialSidebar"},"api-reference/Events":{"id":"api-reference/Events","title":"Events","description":"Event: \'error\'","sidebar":"tutorialSidebar"},"api-reference/Interface":{"id":"api-reference/Interface","title":"Interface","description":"Interface: Transferable","sidebar":"tutorialSidebar"},"api-reference/Methods":{"id":"api-reference/Methods","title":"Methods","description":"Method: run(task[, options])","sidebar":"tutorialSidebar"},"api-reference/Properties":{"id":"api-reference/Properties","title":"Properties","description":"Property: completed (readonly)","sidebar":"tutorialSidebar"},"api-reference/Static Properties and Methods":{"id":"api-reference/Static Properties and Methods","title":"Static Properties and Methods","description":"Static property: isWorkerThread (readonly)","sidebar":"tutorialSidebar"},"examples/Aborting Tasks":{"id":"examples/Aborting Tasks","title":"Aborting Tasks","description":"Piscina allows submitted tasks to be cancelled even if the task has already been submitted to a worker and is being actively processed. This can be used, for instance, to cancel tasks that are taking too long to run.","sidebar":"tutorialSidebar"},"examples/Async Load":{"id":"examples/Async Load","title":"Async Load","description":"Piscina supports asynchronously loaded workers. This feature allows you to perform asynchronous operations during worker initialization, such as loading configurations or establishing database connections.","sidebar":"tutorialSidebar"},"examples/ES Module":{"id":"examples/ES Module","title":"ES Module","description":"Piscina supports ES modules (ESM) out of the box. This example demonstrates how to use Piscina with ES modules in both the main script and the worker file.","sidebar":"tutorialSidebar"},"examples/Message Port":{"id":"examples/Message Port","title":"Message Port","description":"Worker threads can receive MessagePort objects, enabling direct communication channels with the main thread. This feature is useful for scenarios that require continuous communication or transfer of large data sets between threads.","sidebar":"tutorialSidebar"},"examples/Messages":{"id":"examples/Messages","title":"Messages","description":"Piscina allows workers to send messages back to the main thread using the parentPort.postMessage() method. This can be useful for sending progress updates, or intermediate results during the execution of a long-running task.","sidebar":"tutorialSidebar"},"examples/Move":{"id":"examples/Move","title":"Move","description":"Piscina provides a move() function that allows the transfer of data between the main thread and worker threads. The example below will show you how to use Piscina.move() to transfer ArrayBuffer without cloning, which can significantly improve performance for large data transfers.","sidebar":"tutorialSidebar"},"examples/Multiple Workers":{"id":"examples/Multiple Workers","title":"Multiple Workers","description":"It is possible for a single Piscina pool to run multiple workers at the same time. To do so, pass the worker filename to run method rather than to the Piscina constructor.","sidebar":"tutorialSidebar"},"examples/Multiple Workers in One File":{"id":"examples/Multiple Workers in One File","title":"Multiple Workers in One File","description":"Piscina allows you to define multiple worker functions within a single file. This approach can be useful when you have related tasks that you want to keep in one module.","sidebar":"tutorialSidebar"},"examples/N-API Native Addon":{"id":"examples/N-API Native Addon","title":"N-API Native Addon","description":"For CPU-intensive tasks or when implementing workers in languages such as C++ or Rust, you can leverage Piscina\'s support for native addons as worker implementations.","sidebar":"tutorialSidebar"},"examples/Named Tasks":{"id":"examples/Named Tasks","title":"Named Tasks","description":"Piscina supports running named tasks within a single worker file. This example demonstrates how to use a dispatcher pattern to execute different operations based on the task name.","sidebar":"tutorialSidebar"},"examples/Progress":{"id":"examples/Progress","title":"Progress","description":"You can track the progress of long-running tasks using a MessageChannel. This can be adapted for use cases where you need to track the progress of long-running tasks executed in worker threads.","sidebar":"tutorialSidebar"},"examples/React Server Side Rendering":{"id":"examples/React Server Side Rendering","title":"React Server Side Rendering","description":"This example explains how to use Piscina for server-side rendering (SSR) of React components. We\'ll compare a pooled version using Piscina with an unpooled version to highlight the benefits of using a thread pool for SSR.","sidebar":"tutorialSidebar"},"examples/Resource Limits":{"id":"examples/Resource Limits","title":"Resource Limits","description":"Piscina allows you to set resource limits on worker threads to prevent them from consuming excessive memory. The example below will show you how to configure and use resource limits to handle out-of-memory scenarios.","sidebar":"tutorialSidebar"},"examples/Scrypt":{"id":"examples/Scrypt","title":"Scrypt","description":"This example demonstrates the performance benefits of using Piscina for CPU-intensive cryptographic operations, specifically the scrypt key derivation function. It compares four different implementations: pooled and unpooled versions, each with both synchronous and asynchronous variants.","sidebar":"tutorialSidebar"},"examples/Server":{"id":"examples/Server","title":"Server","description":"The benefit of offloading work to a worker pool will vary significantly","sidebar":"tutorialSidebar"},"examples/Simple":{"id":"examples/Simple","title":"Simple","description":"In this example, we create a Piscina instance that uses a worker file to perform a simple addition operation. The main script (index.js) creates the Piscina instance and runs a task, while the worker script (worker.js) defines the task to be executed.","sidebar":"tutorialSidebar"},"examples/Simple Async":{"id":"examples/Simple Async","title":"Simple Async","description":"This example builds upon the simple addition scenario in the previous section. In this section, we simulated an asynchronous operation in the worker file. The simulated delay (100ms) represents any asynchronous operation that might occur in a real-world scenario, such as database queries, file I/O, or network requests.","sidebar":"tutorialSidebar"},"examples/Stream":{"id":"examples/Stream","title":"Stream","description":"This example explains how Piscina can be used for more complex scenarios involving stream processing. Piscina allows for efficient data transfer between the main thread and worker threads using MessagePort.","sidebar":"tutorialSidebar"},"examples/Stream-In":{"id":"examples/Stream-In","title":"Stream-In","description":"Piscina can be effectively used in data processing pipelines, handling large volumes of data efficiently by leveraging worker threads and implementing proper flow control.","sidebar":"tutorialSidebar"},"examples/Task Queue":{"id":"examples/Task Queue","title":"Task Queue","description":"You can extend Piscina\'s functionality by implementing a custom task queue. Instead of the default FIFO (First-In-First-Out) queue, it uses a priority queue to manage tasks.","sidebar":"tutorialSidebar"},"examples/Typescript":{"id":"examples/Typescript","title":"Typescript","description":"Although Piscina itself is written in TypeScript and supports TypeScript out of the box, complication arises when trying to use .ts files directly as worker files because Node.js does not support TypeScript natively.","sidebar":"tutorialSidebar"},"examples/Using Typescript with Piscina":{"id":"examples/Using Typescript with Piscina","title":"Using Typescript with Piscina","description":"Although Piscina itself is written in TypeScript and supports TypeScript out of the box, complication arises when trying to use .ts files directly as worker files because Node.js does not support TypeScript natively.","sidebar":"tutorialSidebar"},"examples/Web Streams":{"id":"examples/Web Streams","title":"Web Streams","description":"You can work with modern Web APIs like Web Streams using Piscina. Web Streams enable efficient processing of streaming data across multiple threads. It\'s particularly useful for scenarios involving large datasets or real-time data processing where the benefits of multi-threading can be significant.","sidebar":"tutorialSidebar"},"examples/Web Streams Transfer":{"id":"examples/Web Streams Transfer","title":"Web Streams Transfer","description":"Using Web Streams and Piscina, you can create a data processing pipeline. This is useful for cases involving real-time data transformation or analysis.","sidebar":"tutorialSidebar"},"examples/Worker Options":{"id":"examples/Worker Options","title":"Worker Options","description":"Piscina allows you to customize the environment and runtime options for worker threads. You can set environment variables, command-line arguments, and other options for the worker processes.","sidebar":"tutorialSidebar"},"getting-started/Basic Usage":{"id":"getting-started/Basic Usage","title":"Basic Usage","description":"Setting Up Your Main File","sidebar":"tutorialSidebar"},"getting-started/Installation":{"id":"getting-started/Installation","title":"Installation","description":"This section will guide you through the process of getting started with Piscina.js. We\'ll cover installation, basic usage, and configuration options to help you quickly integrate Piscina.js into your project.","sidebar":"tutorialSidebar"},"getting-started/Managing Worker Threads":{"id":"getting-started/Managing Worker Threads","title":"Managing Worker Threads","description":"Delaying Availability of Workers","sidebar":"tutorialSidebar"},"Introduction":{"id":"Introduction","title":"Introduction","description":"Piscina.js is a powerful Node.js worker pool library that allows you to efficiently run CPU-intensive tasks in parallel using worker threads. It provides a simple API for offloading computationally expensive tasks to a pool of worker threads, thereby improving the performance and scalability of your Node.js applications.","sidebar":"tutorialSidebar"},"update-log/changelog":{"id":"update-log/changelog","title":"ChangeLog","description":"","sidebar":"tutorialSidebar"},"update-log/Release Notes":{"id":"update-log/Release Notes","title":"Release Notes","description":"4.1.0","sidebar":"tutorialSidebar"}}}}')}}]);