"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2494],{2769:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=r(4848),s=r(8453);const a={id:"Interface",sidebar_position:7},i=void 0,o={id:"api-reference/Interface",title:"Interface",description:"Interface: Transferable",source:"@site/docs/api-reference/interface.md",sourceDirName:"api-reference",slug:"/api-reference/Interface",permalink:"/api-reference/Interface",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"Interface",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Static Properties and Methods",permalink:"/api-reference/Static Properties and Methods"},next:{title:"Update Log",permalink:"/category/update-log"}},c={},l=[{value:"Interface: <code>Transferable</code>",id:"interface-transferable",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"interface-transferable",children:["Interface: ",(0,t.jsx)(n.code,{children:"Transferable"})]}),"\n",(0,t.jsxs)(n.p,{children:["Objects may implement the ",(0,t.jsx)(n.code,{children:"Transferable"})," interface to create their own\ncustom transferable objects. This is useful when an object being\npassed into or from a worker contains a deeply nested transferable\nobject such as an ",(0,t.jsx)(n.code,{children:"ArrayBuffer"})," or ",(0,t.jsx)(n.code,{children:"MessagePort"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Transferable"})," objects expose two properties inspected by Piscina\nto determine how to transfer the object. These properties are\nnamed using the special static ",(0,t.jsx)(n.code,{children:"Piscina.transferableSymbol"})," and\n",(0,t.jsx)(n.code,{children:"Piscina.valueSymbol"})," properties:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Piscina.transferableSymbol"})," property provides the object\n(or objects) that are to be included in the ",(0,t.jsx)(n.code,{children:"transferList"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Piscina.valueSymbol"})," property provides a surrogate value\nto transmit in place of the ",(0,t.jsx)(n.code,{children:"Transferable"})," itself."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Both properties are required."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const {\n  move,\n  transferableSymbol,\n  valueSymbol\n} = require('piscina');\n\nmodule.exports = () => {\n  const obj = {\n    a: { b: new Uint8Array(5); },\n    c: { new Uint8Array(10); },\n\n    get [transferableSymbol]() {\n      // Transfer the two underlying ArrayBuffers\n      return [this.a.b.buffer, this.c.buffer];\n    }\n\n    get [valueSymbol]() {\n      return { a: { b: this.a.b }, c: this.c };\n    }\n  };\n  return move(obj);\n};\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);