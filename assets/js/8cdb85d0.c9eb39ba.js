"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4443],{5933:(e,n,t)=>{t.d(n,{TF:()=>a});var r=t(4848),s=t(8453);const a=()=>{const e={code:"code",pre:"pre",...(0,s.R)()};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",title:"workerWrapper.js",children:'const { workerData } = require(\'worker_threads\');\n\nif (workerData.fullpath.endsWith(".ts")) {\nrequire("ts-node").register();\n}\nmodule.exports = require(workerData.fullpath);\n'})})}},6936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=t(4848),s=t(8453),a=t(5933),o=t(1470),i=t(9365);const l={id:"Message Port",sidebar_position:4},c=void 0,u={id:"examples/Message Port",title:"Message Port",description:"Worker threads can receive MessagePort objects, enabling direct communication channels with the main thread. This feature is useful for scenarios that require continuous communication or transfer of large data sets between threads.",source:"@site/docs/examples/message-port.mdx",sourceDirName:"examples",slug:"/examples/Message Port",permalink:"/piscina/examples/Message Port",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"Message Port",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"ES Module",permalink:"/piscina/examples/ES Module"},next:{title:"Messages",permalink:"/piscina/examples/Messages"}},d={},p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Worker threads can receive ",(0,r.jsx)(n.code,{children:"MessagePort"})," objects, enabling direct communication channels with the main thread. This feature is useful for scenarios that require continuous communication or transfer of large data sets between threads."]}),"\n",(0,r.jsxs)(n.p,{children:["The example below shows how to use ",(0,r.jsx)(n.code,{children:"MessagePort"})," with Piscina."]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(i.A,{value:"Javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:"'use strict';\n\nconst Piscina = require('piscina');\nconst { resolve } = require('path');\nconst { MessageChannel } = require('worker_threads');\n\nconst piscina = new Piscina({\n  filename: resolve(__dirname, 'worker.js')\n});\n\n(async function () {\n  const channel = new MessageChannel();\n  channel.port2.on('message', (message) => {\n    console.log(message);\n    channel.port2.close();\n  });\n  await piscina.run({ port: channel.port1 }, { transferList: [channel.port1] });\n})();\n"})})}),(0,r.jsxs)(i.A,{value:"Typescript",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import Piscina from "piscina";\nimport { resolve } from "path";\nimport { filename } from "./worker";\nimport { TransferListItem } from "piscina/dist/types";\n\nconst piscina = new Piscina({\n  filename: resolve(__dirname, "./workerWrapper.js"),\n  workerData: { fullpath: filename },\n});\n\ninterface CustomMessagePort extends MessagePort {\n  on(event: string, listener: (message: any) => void): void;\n}\n(async function () {\n  const channel = new MessageChannel();\n  (channel.port2 as CustomMessagePort).on(\'message\', (message: string) => {\n    console.log(message);\n    channel.port2.close();\n  });\n  await piscina.run({ port: channel.port1 }, { transferList:[channel.port1] as TransferListItem});\n})();\n'})}),(0,r.jsx)(a.TF,{})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The worker file receives the ",(0,r.jsx)(n.code,{children:"MessagePort"})," and uses it to send a message back to the main thread:"]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(i.A,{value:"Javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="worker.js"',children:"'use strict';\n\nmodule.exports = ({ port }) => {\n  port.postMessage('hello from the worker pool');\n};\n"})})}),(0,r.jsx)(i.A,{value:"Typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="worker.ts"',children:"import { MessagePort } from 'worker_threads';\n\ninterface WorkerInput {\n  port: MessagePort;\n}\n\nexport default ({ port }: WorkerInput): void => {\n  port.postMessage('hello from the worker pool');\n};\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["You can also check out this example on ",(0,r.jsx)(n.a,{href:"https://github.com/piscinajs/piscina/tree/current/examples/message_port",children:"github"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var r=t(4164);const s={tabItem:"tabItem_Ymn6"};var a=t(4848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,o),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>k});var r=t(6540),s=t(4164),a=t(3104),o=t(6347),i=t(205),l=t(7485),c=t(1682),u=t(679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=p(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[c,d]=m({queryString:t,groupId:s}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,u.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),b=(()=>{const e=c??f;return h({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)}),[d,g,a]),tabValues:a}}var g=t(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function x(e){let{className:n,block:t,selectedValue:r,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),s=i[t].value;s!==r&&(c(n),o(s))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...a,className:(0,s.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function j(e){const n=f(e);return(0,v.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,v.jsx)(x,{...n,...e}),(0,v.jsx)(w,{...n,...e})]})}function k(e){const n=(0,g.A)();return(0,v.jsx)(j,{...e,children:d(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);