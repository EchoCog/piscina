"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6009],{5933:(n,e,r)=>{r.d(e,{TF:()=>s});var t=r(4848),o=r(8453);const s=()=>{const n={code:"code",pre:"pre",...(0,o.R)()};return(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",title:"workerWrapper.js",children:'const { workerData } = require(\'worker_threads\');\n\nif (workerData.fullpath.endsWith(".ts")) {\nrequire("ts-node").register();\n}\nmodule.exports = require(workerData.fullpath);\n'})})}},674:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>u,toc:()=>m});var t=r(4848),o=r(8453),s=r(1470),a=r(9365),i=r(5933);const c={id:"Scrypt",sidebar_position:13},l=void 0,u={id:"examples/Scrypt",title:"Scrypt",description:"This example demonstrates the performance benefits of using Piscina for CPU-intensive cryptographic operations, specifically the scrypt key derivation function. It compares four different implementations: pooled and unpooled versions, each with both synchronous and asynchronous variants.",source:"@site/docs/examples/scrypt.mdx",sourceDirName:"examples",slug:"/examples/Scrypt",permalink:"/examples/Scrypt",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{id:"Scrypt",sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Resource Limits",permalink:"/examples/Resource Limits"},next:{title:"Server",permalink:"/examples/Server"}},p={},m=[{value:"Setup",id:"setup",level:3},{value:"Pooled Asynchronous",id:"pooled-asynchronous",level:3},{value:"Unpooled Asynchronous",id:"unpooled-asynchronous",level:3},{value:"Pooled Synchronous",id:"pooled-synchronous",level:3},{value:"Unpooled Synchronous",id:"unpooled-synchronous",level:3},{value:"Running the Example",id:"running-the-example",level:3}];function d(n){const e={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"This example demonstrates the performance benefits of using Piscina for CPU-intensive cryptographic operations, specifically the scrypt key derivation function. It compares four different implementations: pooled and unpooled versions, each with both synchronous and asynchronous variants."}),"\n",(0,t.jsx)(e.h3,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(e.p,{children:"The monitor script measures event loop delay, helping us to understand the impact of each implementation on the main thread's responsiveness."}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"Javascript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",metastring:'title="monitor.js"',children:"'use strict';\n\nconst { monitorEventLoopDelay } = require('perf_hooks');\nconst { isMainThread } = require('worker_threads');\n\nif (!isMainThread) return;\n\nconst monitor = monitorEventLoopDelay({ resolution: 20 });\n\nmonitor.enable();\n\nprocess.on('exit', () => {\n  monitor.disable();\n  console.log('Main Thread Mean/Max/99% Event Loop Delay:',\n    monitor.mean,\n    monitor.max,\n    monitor.percentile(99));\n});\n"})})}),(0,t.jsx)(a.A,{value:"Typescript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title="monitor.ts"',children:"import { monitorEventLoopDelay } from 'perf_hooks';\nimport { isMainThread } from 'worker_threads';\n\nif (!isMainThread) process.exit();\n\nconst monitor = monitorEventLoopDelay({ resolution: 20 });\n\nmonitor.enable();\n\nprocess.on('exit', () => {\n  monitor.disable();\n  console.log('Main Thread Mean/Max/99% Event Loop Delay:',\n    monitor.mean,\n    monitor.max,\n    monitor.percentile(99));\n});\n\n"})})})]}),"\n",(0,t.jsx)(e.h3,{id:"pooled-asynchronous",children:"Pooled Asynchronous"}),"\n",(0,t.jsx)(e.p,{children:"The pooled versions use Piscina to distribute the scrypt operations across multiple worker threads, potentially improving performance on multi-core systems."}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsxs)(a.A,{value:"Javascript",children:[(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",metastring:'title="pooled.js"',children:"'use strict';\n\nconst Piscina = require('piscina');\nconst { resolve } = require('path');\nconst crypto = require('crypto');\nconst { promisify } = require('util');\nconst randomFill = promisify(crypto.randomFill);\nconst { performance, PerformanceObserver } = require('perf_hooks');\n\nconst obs = new PerformanceObserver((entries) => {\n  console.log(entries.getEntries()[0].duration);\n});\nobs.observe({ entryTypes: ['measure'] });\n\nconst piscina = new Piscina({\n  filename: resolve(__dirname, 'scrypt.js'),\n  concurrentTasksPerWorker: 10\n});\n\nprocess.on('exit', () => {\n  const { runTime, waitTime } = piscina;\n  console.log('Run Time Average:', runTime.average);\n  console.log('Run Time Mean/Stddev:', runTime.mean, runTime.stddev);\n  console.log('Run Time Min:', runTime.min);\n  console.log('Run Time Max:', runTime.max);\n  console.log('Wait Time Average:', waitTime.average);\n  console.log('Wait Time Mean/Stddev:', waitTime.mean, waitTime.stddev);\n  console.log('Wait Time Min:', waitTime.min);\n  console.log('Wait Time Max:', waitTime.max);\n});\n\nasync function * generateInput () {\n  let max = parseInt(process.argv[2] || 10);\n  const data = Buffer.allocUnsafe(10);\n  while (max-- > 0) {\n    yield randomFill(data);\n  }\n}\n\n(async function () {\n  performance.mark('start');\n  const keylen = 64;\n\n  for await (const input of generateInput()) {\n    await piscina.run({ input, keylen });\n  }\n\n  performance.mark('end');\n  performance.measure('start to end', 'start', 'end');\n})();\n"})}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",metastring:'title="scrypt.js"',children:"// eslint-disable no-unused-vars\n'use strict';\n\nconst crypto = require('crypto');\nconst { promisify } = require('util');\nconst scrypt = promisify(crypto.scrypt);\nconst randomFill = promisify(crypto.randomFill);\n\nconst salt = Buffer.allocUnsafe(16);\n\nmodule.exports = async function ({\n  input,\n  keylen,\n  N = 16384,\n  r = 8,\n  p = 1,\n  maxmem = 32 * 1024 * 1024\n}) {\n  return (await scrypt(\n    input,\n    await randomFill(salt),\n    keylen, { N, r, p, maxmem })).toString('hex');\n};\n"})})]}),(0,t.jsxs)(a.A,{value:"Typescript",children:[(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title="pooled.ts"',children:"import { resolve } from 'path';\nimport { promisify } from 'util';\nimport { randomFill } from 'crypto';\nimport { performance } from 'perf_hooks';\nimport Piscina from 'piscina';\nimport { filename } from './scrypt';\n\n// ... (performance observer setup)\n\nconst piscina = new Piscina({\n  filename: resolve(__dirname, 'workerWrapper.js'),\n  workerData: { fullpath: filename },\n  concurrentTasksPerWorker: 10\n});\n\n// ... (process exit handler for statistics)\n\nasync function* generateInput() {\n  let max = parseInt(process.argv[2] || '10', 10);\n  const data = Buffer.allocUnsafe(10);\n  while (max-- > 0) {\n    yield promisify(randomFill)(data);\n  }\n}\n\n(async function () {\n  performance.mark('start');\n  const keylen = 64;\n\n  for await (const input of generateInput()) {\n    await piscina.run({ input, keylen });\n  }\n\n  performance.mark('end');\n  performance.measure('start to end', 'start', 'end');\n})();\n\n"})}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title="scrypt.ts"',children:"import crypto from 'crypto';\nimport { promisify } from 'util';\n\nconst scrypt: any = promisify(crypto.scrypt);\nconst randomFill = promisify(crypto.randomFill);\n\nconst salt = Buffer.allocUnsafe(16);\n\nexport default async function ({\n  input,\n  keylen,\n  N = 16384,\n  r = 8,\n  p = 1,\n  maxmem = 32 * 1024 * 1024\n}: {\n  input: Buffer;\n  keylen: number;\n  N?: number;\n  r?: number;\n  p?: number;\n  maxmem?: number;\n}): Promise<string> {\n  return (\n    await scrypt(input, await randomFill(salt), keylen, { N, r, p, maxmem })\n  ).toString('hex');\n}\nexport const filename = __filename;\n"})}),(0,t.jsx)(i.TF,{})]})]}),"\n",(0,t.jsx)(e.h3,{id:"unpooled-asynchronous",children:"Unpooled Asynchronous"}),"\n",(0,t.jsxs)(e.p,{children:["The asynchronous versions use ",(0,t.jsx)(e.code,{children:"promisify"})," versions of ",(0,t.jsx)(e.code,{children:"scrypt"})," and ",(0,t.jsx)(e.code,{children:"randomFill"}),", which don't block the event loop but may have slightly higher overhead."]}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"Javascript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",metastring:'title="unpooled.js"',children:"'use strict';\n\nconst crypto = require('crypto');\nconst { promisify } = require('util');\nconst randomFill = promisify(crypto.randomFill);\nconst scrypt = promisify(crypto.scrypt);\nconst { performance, PerformanceObserver } = require('perf_hooks');\n\nconst salt = Buffer.allocUnsafe(16);\n\nconst obs = new PerformanceObserver((entries) => {\n  console.log(entries.getEntries()[0].duration);\n});\nobs.observe({ entryTypes: ['measure'] });\n\nasync function * generateInput () {\n  let max = parseInt(process.argv[2] || 10);\n  const data = Buffer.allocUnsafe(10);\n  while (max-- > 0) {\n    yield randomFill(data);\n  }\n}\n\n(async function () {\n  performance.mark('start');\n  const keylen = 64;\n\n  for await (const input of generateInput()) {\n    (await scrypt(input, await randomFill(salt), keylen)).toString('hex');\n  }\n  performance.mark('end');\n  performance.measure('start to end', 'start', 'end');\n})();\n"})})}),(0,t.jsx)(a.A,{value:"Typescript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title="unpooled.ts"',children:"'use strict';\n\nimport crypto from 'crypto';\nimport { promisify } from 'util';\n\nconst randomFill = promisify(crypto.randomFill);\nconst scrypt:any = promisify(crypto.scrypt);\nconst { performance, PerformanceObserver } = require('perf_hooks');\n\nconst salt = Buffer.allocUnsafe(16);\n\nconst obs = new PerformanceObserver((entries: { getEntries: () => { duration: any; }[]; }) => {\n  console.log(entries.getEntries()[0].duration);\n});\nobs.observe({ entryTypes: ['measure'] });\n\nasync function* generateInput() {\n  let max = parseInt(process.argv[2] || '10', 10);\n  const data = Buffer.allocUnsafe(10);\n  while (max-- > 0) {\n    yield randomFill(data);\n  }\n}\n\n(async function () {\n  performance.mark('start');\n  const keylen = 64;\n\n  for await (const input of generateInput()) {\n    (await scrypt(input, await randomFill(salt), keylen)).toString('hex');\n  }\n  performance.mark('end');\n  performance.measure('start to end', 'start', 'end');\n})();\n"})})})]}),"\n",(0,t.jsx)(e.h3,{id:"pooled-synchronous",children:"Pooled Synchronous"}),"\n",(0,t.jsxs)(e.p,{children:["The synchronous versions use ",(0,t.jsx)(e.code,{children:"scryptSync"})," and ",(0,t.jsx)(e.code,{children:"randomFillSync"}),", which can be more efficient but may block the event loop."]}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsxs)(a.A,{value:"Javascript",children:[(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",metastring:'title="pooled_sync.js"',children:"'use strict';\n\nconst Piscina = require('../..');\nconst { resolve } = require('path');\nconst crypto = require('crypto');\nconst { promisify } = require('util');\nconst randomFill = promisify(crypto.randomFill);\nconst { performance, PerformanceObserver } = require('perf_hooks');\n\nconst obs = new PerformanceObserver((entries) => {\n  console.log(entries.getEntries()[0].duration);\n});\nobs.observe({ entryTypes: ['measure'] });\n\nconst piscina = new Piscina({\n  filename: resolve(__dirname, 'scrypt_sync.js')\n});\n\nprocess.on('exit', () => {\n  const { runTime, waitTime } = piscina;\n  console.log('Run Time Average:', runTime.average);\n  console.log('Run Time Mean/Stddev:', runTime.mean, runTime.stddev);\n  console.log('Run Time Min:', runTime.min);\n  console.log('Run Time Max:', runTime.max);\n  console.log('Wait Time Average:', waitTime.average);\n  console.log('Wait Time Mean/Stddev:', waitTime.mean, waitTime.stddev);\n  console.log('Wait Time Min:', waitTime.min);\n  console.log('Wait Time Max:', waitTime.max);\n});\n\nasync function * generateInput () {\n  let max = parseInt(process.argv[2] || 10);\n  const data = Buffer.allocUnsafe(10);\n  while (max-- > 0) {\n    yield randomFill(data);\n  }\n}\n\n(async function () {\n  performance.mark('start');\n  const keylen = 64;\n\n  for await (const input of generateInput()) {\n    await piscina.run({ input, keylen });\n  }\n\n  performance.mark('end');\n  performance.measure('start to end', 'start', 'end');\n})();\n"})}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",metastring:'title="scrypt_sync.js"',children:"'use strict';\n\nconst { scryptSync, randomFillSync } = require('crypto');\n\nconst salt = Buffer.allocUnsafe(16);\n\nmodule.exports = function ({\n  input,\n  keylen,\n  N = 16384,\n  r = 8,\n  p = 1,\n  maxmem = 32 * 1024 * 1024\n}) {\n  return scryptSync(input,\n    randomFillSync(salt),\n    keylen,\n    { N, r, p, maxmem }).toString('hex');\n};\n"})})]}),(0,t.jsxs)(a.A,{value:"Typescript",children:[(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title="pooled_sync.ts"',children:"'use strict';\n\nimport Piscina from 'piscina';\nimport { resolve } from 'path';\nimport crypto from 'crypto';\nimport { promisify } from 'util';\nimport { filename } from './scrypt_sync';\n\nconst randomFill = promisify(crypto.randomFill);\nconst { performance, PerformanceObserver } = require('perf_hooks');\n\nconst obs = new PerformanceObserver((entries: { getEntries: () => { duration: any; }[]; }) => {\n  console.log(entries.getEntries()[0].duration);\n});\nobs.observe({ entryTypes: ['measure'] });\n\nconst piscina = new Piscina({\n    filename: resolve(__dirname, 'workerWrapper.js'),\n    workerData: { fullpath: filename },\n});\n\nprocess.on('exit', () => {\n  const { runTime, waitTime } = piscina;\n  console.log('Run Time Average:', runTime.average);\n  console.log('Run Time Mean/Stddev:', runTime.mean, runTime.stddev);\n  console.log('Run Time Min:', runTime.min);\n  console.log('Run Time Max:', runTime.max);\n  console.log('Wait Time Average:', waitTime.average);\n  console.log('Wait Time Mean/Stddev:', waitTime.mean, waitTime.stddev);\n  console.log('Wait Time Min:', waitTime.min);\n  console.log('Wait Time Max:', waitTime.max);\n});\n\nasync function* generateInput() {\n  let max = parseInt(process.argv[2] || '10', 10);\n  const data = Buffer.allocUnsafe(10);\n  while (max-- > 0) {\n    yield randomFill(data);\n  }\n}\n\n(async function () {\n  performance.mark('start');\n  const keylen = 64;\n\n  for await (const input of generateInput()) {\n    await piscina.run({ input, keylen });\n  }\n\n  performance.mark('end');\n  performance.measure('start to end', 'start', 'end');\n})();\n\n"})}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title="scrypt_sync.ts"',children:"'use strict';\n\nimport { scryptSync, randomFillSync } from 'crypto';\n\nconst salt = Buffer.allocUnsafe(16);\n\nexport default function ({\n  input,\n  keylen,\n  N = 16384,\n  r = 8,\n  p = 1,\n  maxmem = 32 * 1024 * 1024\n}: {\n  input: Buffer;\n  keylen: number;\n  N?: number;\n  r?: number;\n  p?: number;\n  maxmem?: number;\n}): string {\n  return scryptSync(input, randomFillSync(salt), keylen, { N, r, p, maxmem }).toString('hex');\n}\nexport const filename = __filename;\n"})}),(0,t.jsx)(i.TF,{})]})]}),"\n",(0,t.jsx)(e.h3,{id:"unpooled-synchronous",children:"Unpooled Synchronous"}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"Javascript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",metastring:'title="unpooled_sync.js"',children:"'use strict';\n\nconst crypto = require('crypto');\nconst { promisify } = require('util');\nconst { scryptSync, randomFillSync } = crypto;\nconst randomFill = promisify(crypto.randomFill);\nconst { performance, PerformanceObserver } = require('perf_hooks');\n\nconst salt = Buffer.allocUnsafe(16);\n\nconst obs = new PerformanceObserver((entries) => {\n  console.log(entries.getEntries()[0].duration);\n});\nobs.observe({ entryTypes: ['measure'] });\n\nasync function * generateInput () {\n  let max = parseInt(process.argv[2] || 10);\n  const data = Buffer.allocUnsafe(10);\n  while (max-- > 0) {\n    yield randomFill(data);\n  }\n}\n\n(async function () {\n  performance.mark('start');\n  const keylen = 64;\n\n  for await (const input of generateInput()) {\n    // Everything in here is intentionally sync\n    scryptSync(input, randomFillSync(salt), keylen).toString('hex');\n  }\n  performance.mark('end');\n  performance.measure('start to end', 'start', 'end');\n})();\n"})})}),(0,t.jsx)(a.A,{value:"Typescript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title="unpooled_sync.ts"',children:"'use strict';\n\nimport { scryptSync, randomFillSync } from 'crypto';\n\nconst salt = Buffer.allocUnsafe(16);\n\nexport default function ({\n  input,\n  keylen,\n  N = 16384,\n  r = 8,\n  p = 1,\n  maxmem = 32 * 1024 * 1024\n}: {\n  input: Buffer;\n  keylen: number;\n  N?: number;\n  r?: number;\n  p?: number;\n  maxmem?: number;\n}): string {\n  return scryptSync(input, randomFillSync(salt), keylen, { N, r, p, maxmem }).toString('hex');\n}\n"})})})]}),"\n",(0,t.jsx)(e.h3,{id:"running-the-example",children:"Running the Example"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"package.json"})," file includes scripts to run each variant of the scrypt implementation with the monitor."]}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(a.A,{value:"Javascript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "name": "scrypt",\n  "version": "1.0.0",\n  "scripts": {\n    "pooled": "node -r ./monitor pooled",\n    "unpooled": "node -r ./monitor unpooled",\n    "pooled-sync": "node -r ./monitor pooled_sync",\n    "unpooled-sync": "node -r ./monitor unpooled_sync"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "MIT",\n  "description": ""\n}\n'})})}),(0,t.jsx)(a.A,{value:"Typescript",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "name": "scrypt",\n  "version": "1.0.0",\n  "scripts": {\n    "pooled": "ts-node -r ./monitor pooled",\n    "unpooled": "ts-node -r ./monitor unpooled",\n    "pooled-sync": "ts-node -r ./monitor pooled_sync",\n    "unpooled-sync": "ts-node -r ./monitor unpooled_sync"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "MIT",\n  "description": "",\n  "dependencies": {\n    "@types/node": "^20.14.10",\n    "ts-node": "^10.9.2",\n    "typescript": "^5.5.3"\n  }\n}\n'})})})]}),"\n",(0,t.jsx)(e.p,{children:"To run the different implementations and compare their performance:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm run pooled 100\nnpm run unpooled 100\nnpm run pooled-sync 100\nnpm run unpooled-sync 100\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You can also check out this example on ",(0,t.jsx)(e.a,{href:"https://github.com/piscinajs/piscina/tree/current/examples/scrypt",children:"github"}),"."]})]})}function f(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},9365:(n,e,r)=>{r.d(e,{A:()=>a});r(6540);var t=r(4164);const o={tabItem:"tabItem_Ymn6"};var s=r(4848);function a(n){let{children:e,hidden:r,className:a}=n;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,a),hidden:r,children:e})}},1470:(n,e,r)=>{r.d(e,{A:()=>T});var t=r(6540),o=r(4164),s=r(3104),a=r(6347),i=r(205),c=r(7485),l=r(1682),u=r(679);function p(n){return t.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,t.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(n){const{values:e,children:r}=n;return(0,t.useMemo)((()=>{const n=e??function(n){return p(n).map((n=>{let{props:{value:e,label:r,attributes:t,default:o}}=n;return{value:e,label:r,attributes:t,default:o}}))}(r);return function(n){const e=(0,l.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,r])}function d(n){let{value:e,tabValues:r}=n;return r.some((n=>n.value===e))}function f(n){let{queryString:e=!1,groupId:r}=n;const o=(0,a.W6)(),s=function(n){let{queryString:e=!1,groupId:r}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:e,groupId:r});return[(0,c.aZ)(s),(0,t.useCallback)((n=>{if(!s)return;const e=new URLSearchParams(o.location.search);e.set(s,n),o.replace({...o.location,search:e.toString()})}),[s,o])]}function y(n){const{defaultValue:e,queryString:r=!1,groupId:o}=n,s=m(n),[a,c]=(0,t.useState)((()=>function(n){let{defaultValue:e,tabValues:r}=n;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${r.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=r.find((n=>n.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:e,tabValues:s}))),[l,p]=f({queryString:r,groupId:o}),[y,h]=function(n){let{groupId:e}=n;const r=function(n){return n?`docusaurus.tab.${n}`:null}(e),[o,s]=(0,u.Dv)(r);return[o,(0,t.useCallback)((n=>{r&&s.set(n)}),[r,s])]}({groupId:o}),g=(()=>{const n=l??y;return d({value:n,tabValues:s})?n:null})();(0,i.A)((()=>{g&&c(g)}),[g]);return{selectedValue:a,selectValue:(0,t.useCallback)((n=>{if(!d({value:n,tabValues:s}))throw new Error(`Can't select invalid tab value=${n}`);c(n),p(n),h(n)}),[p,h,s]),tabValues:s}}var h=r(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=r(4848);function v(n){let{className:e,block:r,selectedValue:t,selectValue:a,tabValues:i}=n;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),u=n=>{const e=n.currentTarget,r=c.indexOf(e),o=i[r].value;o!==t&&(l(e),a(o))},p=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const r=c.indexOf(n.currentTarget)+1;e=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(n.currentTarget)-1;e=c[r]??c[c.length-1];break}}e?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":r},e),children:i.map((n=>{let{value:e,label:r,attributes:s}=n;return(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:n=>c.push(n),onKeyDown:p,onClick:u,...s,className:(0,o.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":t===e}),children:r??e},e)}))})}function b(n){let{lazy:e,children:r,selectedValue:o}=n;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(e){const n=s.find((n=>n.props.value===o));return n?(0,t.cloneElement)(n,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((n,e)=>(0,t.cloneElement)(n,{key:e,hidden:n.props.value!==o})))})}function j(n){const e=y(n);return(0,x.jsxs)("div",{className:(0,o.A)("tabs-container",g.tabList),children:[(0,x.jsx)(v,{...e,...n}),(0,x.jsx)(b,{...e,...n})]})}function T(n){const e=(0,h.A)();return(0,x.jsx)(j,{...n,children:p(n.children)},String(e))}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>i});var t=r(6540);const o={},s=t.createContext(o);function a(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);