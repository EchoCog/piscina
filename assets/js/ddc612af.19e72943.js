"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3324],{1310:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=t(4848),o=t(8453);const i={id:"Static Properties and Methods",sidebar_position:6},s=void 0,a={id:"api-reference/Static Properties and Methods",title:"Static Properties and Methods",description:"Static property: isWorkerThread (readonly)",source:"@site/docs/api-reference/static-property.md",sourceDirName:"api-reference",slug:"/api-reference/Static Properties and Methods",permalink:"/piscina/api-reference/Static Properties and Methods",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"Static Properties and Methods",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Properties",permalink:"/piscina/api-reference/Properties"},next:{title:"Interface",permalink:"/piscina/api-reference/Interface"}},c={},d=[{value:"Static property: <code>isWorkerThread</code> (readonly)",id:"static-property-isworkerthread-readonly",level:2},{value:"Static property: <code>version</code> (readonly)",id:"static-property-version-readonly",level:2},{value:"Static method: <code>move(value)</code>",id:"static-method-movevalue",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h2,{id:"static-property-isworkerthread-readonly",children:["Static property: ",(0,n.jsx)(r.code,{children:"isWorkerThread"})," (readonly)"]}),"\n",(0,n.jsxs)(r.p,{children:["Is ",(0,n.jsx)(r.code,{children:"true"})," if this code runs inside a ",(0,n.jsx)(r.code,{children:"Piscina"})," threadpool as a Worker."]}),"\n",(0,n.jsxs)(r.h2,{id:"static-property-version-readonly",children:["Static property: ",(0,n.jsx)(r.code,{children:"version"})," (readonly)"]}),"\n",(0,n.jsx)(r.p,{children:"Provides the current version of this library as a semver string."}),"\n",(0,n.jsxs)(r.h2,{id:"static-method-movevalue",children:["Static method: ",(0,n.jsx)(r.code,{children:"move(value)"})]}),"\n",(0,n.jsxs)(r.p,{children:["By default, any value returned by a worker function will be cloned when\nreturned back to the Piscina pool, even if that object is capable of\nbeing transfered. The ",(0,n.jsx)(r.code,{children:"Piscina.move()"})," method can be used to wrap and\nmark transferable values such that they will by transfered rather than\ncloned."]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"value"})," may be any object supported by Node.js to be transferable\n(e.g. ",(0,n.jsx)(r.code,{children:"ArrayBuffer"}),", any ",(0,n.jsx)(r.code,{children:"TypedArray"}),", or ",(0,n.jsx)(r.code,{children:"MessagePort"}),"), or any object\nimplementing the ",(0,n.jsx)(r.code,{children:"Transferable"})," interface."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"const { move } = require('piscina');\n\nmodule.exports = () => {\n  return move(new ArrayBuffer(10));\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"move()"})," method will throw if the ",(0,n.jsx)(r.code,{children:"value"})," is not transferable."]}),"\n",(0,n.jsxs)(r.p,{children:["The object returned by the ",(0,n.jsx)(r.code,{children:"move()"})," method should not be set as a\nnested value in an object. If it is used, the ",(0,n.jsx)(r.code,{children:"move()"})," object itself\nwill be cloned as opposed to transfering the object it wraps."]})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>a});var n=t(6540);const o={},i=n.createContext(o);function s(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);