"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5494],{1217:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=r(4848),o=r(8453);const i={sidebar_position:1,slug:"/"},s="Introduction",a={id:"Introduction",title:"Introduction",description:"Piscina.js is a powerful Node.js worker pool library that allows you to efficiently run CPU-intensive tasks in parallel using worker threads. It provides a simple API for offloading computationally expensive tasks to a pool of worker threads, thereby improving the performance and scalability of your Node.js applications.",source:"@site/docs/Introduction.md",sourceDirName:".",slug:"/",permalink:"/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Getting Started",permalink:"/category/getting-started"}},c={},d=[{value:"Why Piscina?",id:"why-piscina",level:2},{value:"Key features",id:"key-features",level:2}];function l(e){const t={a:"a",br:"br",h1:"h1",h2:"h2",p:"p",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(t.p,{children:"Piscina.js is a powerful Node.js worker pool library that allows you to efficiently run CPU-intensive tasks in parallel using worker threads. It provides a simple API for offloading computationally expensive tasks to a pool of worker threads, thereby improving the performance and scalability of your Node.js applications."}),"\n",(0,n.jsx)(t.h2,{id:"why-piscina",children:"Why Piscina?"}),"\n",(0,n.jsx)(t.p,{children:"In the early days of worker threads, the Node.js core team encountered an issue where a user's application was spinning up thousands of concurrent worker threads, leading to performance issues. While this specific issue helped identify a minor memory leak in the worker implementation, it highlighted a broader problem: the misuse of worker threads due to a lack of understanding."}),"\n",(0,n.jsxs)(t.p,{children:["While worker threads have matured and their usage has become more widespread, there is still a need for better examples and education around their correct usage. This realization led to the creation of Piscina, an open-source project sponsored by ",(0,n.jsx)(t.a,{href:"https://www.nearform.com/",children:"NearForm Research"}),", focused on providing guidance and best practices for using worker threads in Node.js applications."]}),"\n",(0,n.jsx)(t.p,{children:"With worker threads now a well-established feature in Node.js, Piscina aims to bridge the gap between the potential of worker threads and their practical implementation."}),"\n",(0,n.jsx)(t.h2,{id:"key-features",children:"Key features"}),"\n",(0,n.jsxs)(t.p,{children:["\u2714 Fast communication between threads",(0,n.jsx)(t.br,{}),"\n","\u2714 Covers both fixed-task and variable-task scenarios",(0,n.jsx)(t.br,{}),"\n","\u2714 Supports flexible pool sizes",(0,n.jsx)(t.br,{}),"\n","\u2714 Proper async tracking integration",(0,n.jsx)(t.br,{}),"\n","\u2714 Tracking statistics for run and wait times",(0,n.jsx)(t.br,{}),"\n","\u2714 Cancellation Support",(0,n.jsx)(t.br,{}),"\n","\u2714 Supports enforcing memory resource limits",(0,n.jsx)(t.br,{}),"\n","\u2714 Supports CommonJS, ESM, and TypeScript",(0,n.jsx)(t.br,{}),"\n","\u2714 Custom task queues",(0,n.jsx)(t.br,{}),"\n","\u2714 Optional CPU scheduling priorities on Linux"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(6540);const o={},i=n.createContext(o);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);