"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6319],{9041:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var t=s(4848),r=s(8453);const o={id:"Methods",sidebar_position:3},i=void 0,d={id:"api-reference/Methods",title:"Methods",description:"Method: run(task[, options])",source:"@site/docs/api-reference/method.md",sourceDirName:"api-reference",slug:"/api-reference/Methods",permalink:"/api-reference/Methods",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"Methods",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Class",permalink:"/api-reference/Class"},next:{title:"Events",permalink:"/api-reference/Events"}},c={},l=[{value:"Method: <code>run(task[, options])</code>",id:"method-runtask-options",level:2},{value:"Method: <code>runTask(task[, transferList][, filename][, abortSignal])</code>",id:"method-runtasktask-transferlist-filename-abortsignal",level:2},{value:"Method: <code>destroy()</code>",id:"method-destroy",level:2},{value:"Method: <code>close([options])</code>",id:"method-closeoptions",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"method-runtask-options",children:["Method: ",(0,t.jsx)(n.code,{children:"run(task[, options])"})]}),"\n",(0,t.jsx)(n.p,{children:"Schedules a task to be run on a Worker thread."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"task"}),": Any value. This will be passed to the function that is exported from\n",(0,t.jsx)(n.code,{children:"filename"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"transferList"}),": An optional lists of objects that is passed to\n[",(0,t.jsx)(n.code,{children:"postMessage()"}),"] when posting ",(0,t.jsx)(n.code,{children:"task"})," to the Worker, which are transferred\nrather than cloned."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filename"}),": Optionally overrides the ",(0,t.jsx)(n.code,{children:"filename"})," option passed to the\nconstructor for this task. If no ",(0,t.jsx)(n.code,{children:"filename"})," was specified to the constructor,\nthis is mandatory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": Optionally overrides the exported worker function used for the task."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"abortSignal"}),": An ",(0,t.jsx)(n.code,{children:"AbortSignal"})," instance. If passed, this can be used to\ncancel a task. If the task is already running, the corresponding ",(0,t.jsx)(n.code,{children:"Worker"}),"\nthread will be stopped.\n(More generally, any ",(0,t.jsx)(n.code,{children:"EventEmitter"})," or ",(0,t.jsx)(n.code,{children:"EventTarget"})," that emits ",(0,t.jsx)(n.code,{children:"'abort'"}),"\nevents can be passed here.) Abortable tasks cannot share threads regardless\nof the ",(0,t.jsx)(n.code,{children:"concurrentTasksPerWorker"})," options."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This returns a ",(0,t.jsx)(n.code,{children:"Promise"})," for the return value of the (async) function call\nmade to the function exported from ",(0,t.jsx)(n.code,{children:"filename"}),". If the (async) function throws\nan error, the returned ",(0,t.jsx)(n.code,{children:"Promise"})," will be rejected with that error.\nIf the task is aborted, the returned ",(0,t.jsx)(n.code,{children:"Promise"})," is rejected with an error\nas well."]}),"\n",(0,t.jsxs)(n.h2,{id:"method-runtasktask-transferlist-filename-abortsignal",children:["Method: ",(0,t.jsx)(n.code,{children:"runTask(task[, transferList][, filename][, abortSignal])"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Deprecated"})," -- Use ",(0,t.jsx)(n.code,{children:"run(task, options)"})," instead."]}),"\n",(0,t.jsx)(n.p,{children:"Schedules a task to be run on a Worker thread."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"task"}),": Any value. This will be passed to the function that is exported from\n",(0,t.jsx)(n.code,{children:"filename"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"transferList"}),": An optional lists of objects that is passed to\n[",(0,t.jsx)(n.code,{children:"postMessage()"}),"] when posting ",(0,t.jsx)(n.code,{children:"task"})," to the Worker, which are transferred\nrather than cloned."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filename"}),": Optionally overrides the ",(0,t.jsx)(n.code,{children:"filename"})," option passed to the\nconstructor for this task. If no ",(0,t.jsx)(n.code,{children:"filename"})," was specified to the constructor,\nthis is mandatory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"signal"}),": An [",(0,t.jsx)(n.code,{children:"AbortSignal"}),"][] instance. If passed, this can be used to\ncancel a task. If the task is already running, the corresponding ",(0,t.jsx)(n.code,{children:"Worker"}),"\nthread will be stopped.\n(More generally, any ",(0,t.jsx)(n.code,{children:"EventEmitter"})," or ",(0,t.jsx)(n.code,{children:"EventTarget"})," that emits ",(0,t.jsx)(n.code,{children:"'abort'"}),"\nevents can be passed here.) Abortable tasks cannot share threads regardless\nof the ",(0,t.jsx)(n.code,{children:"concurrentTasksPerWorker"})," options."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This returns a ",(0,t.jsx)(n.code,{children:"Promise"})," for the return value of the (async) function call\nmade to the function exported from ",(0,t.jsx)(n.code,{children:"filename"}),". If the (async) function throws\nan error, the returned ",(0,t.jsx)(n.code,{children:"Promise"})," will be rejected with that error.\nIf the task is aborted, the returned ",(0,t.jsx)(n.code,{children:"Promise"})," is rejected with an error\nas well."]}),"\n",(0,t.jsxs)(n.h2,{id:"method-destroy",children:["Method: ",(0,t.jsx)(n.code,{children:"destroy()"})]}),"\n",(0,t.jsxs)(n.p,{children:["Stops all Workers and rejects all ",(0,t.jsx)(n.code,{children:"Promise"}),"s for pending tasks."]}),"\n",(0,t.jsxs)(n.p,{children:["This returns a ",(0,t.jsx)(n.code,{children:"Promise"})," that is fulfilled once all threads have stopped."]}),"\n",(0,t.jsxs)(n.h2,{id:"method-closeoptions",children:["Method: ",(0,t.jsx)(n.code,{children:"close([options])"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"force"}),": A ",(0,t.jsx)(n.code,{children:"boolean"})," value that indicates whether to abort all tasks that\nare enqueued but not started yet. The default is ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"It stops all Workers gracefully."}),"\n",(0,t.jsxs)(n.p,{children:["This returns a ",(0,t.jsx)(n.code,{children:"Promise"})," that is fulfilled once all tasks that were started\nhave completed and all threads have stopped."]}),"\n",(0,t.jsxs)(n.p,{children:["This method is similar to ",(0,t.jsx)(n.code,{children:"destroy()"}),", but with the difference that ",(0,t.jsx)(n.code,{children:"close()"}),"\nwill wait for the worker tasks to finish, while ",(0,t.jsx)(n.code,{children:"destroy()"}),"\nwill abort them immediately."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);