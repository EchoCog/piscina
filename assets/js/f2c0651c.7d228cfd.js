"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3653],{5933:(e,r,n)=>{n.d(r,{TF:()=>a});var t=n(4848),s=n(8453);const a=()=>{const e={code:"code",pre:"pre",...(0,s.R)()};return(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",title:"workerWrapper.js",children:'const { workerData } = require(\'worker_threads\');\n\nif (workerData.fullpath.endsWith(".ts")) {\nrequire("ts-node").register();\n}\nmodule.exports = require(workerData.fullpath);\n'})})}},9874:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var t=n(4848),s=n(8453),a=n(5933),o=n(1470),i=n(9365);const l={id:"Progress",sidebar_position:11},c=void 0,u={id:"examples/Progress",title:"Progress",description:"You can track the progress of long-running tasks using a MessageChannel. This can be adapted for use cases where you need to track the progress of long-running tasks executed in worker threads.",source:"@site/docs/examples/progress.mdx",sourceDirName:"examples",slug:"/examples/Progress",permalink:"/piscina/examples/Progress",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{id:"Progress",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Named Tasks",permalink:"/piscina/examples/Named Tasks"},next:{title:"React Server Side Rendering",permalink:"/piscina/examples/React Server Side Rendering"}},p={},d=[];function h(e){const r={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["You can track the progress of long-running tasks using a ",(0,t.jsx)(r.code,{children:"MessageChannel"}),". This can be adapted for use cases where you need to track the progress of long-running tasks executed in worker threads."]}),"\n",(0,t.jsx)(r.p,{children:"The example below shows how to add a progress bar for tasks running in worker threads. To get started, install the required dependency:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install progress\n"})}),"\n",(0,t.jsx)(r.p,{children:"The main script creates progress bars for each task and updates them based on messages received from the workers."}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(i.A,{value:"Javascript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",metastring:'title="index.js"',children:"'use strict';\n\nconst Piscina = require('piscina');\nconst { resolve } = require('path');\nconst ProgressBar = require('progress');\n\n// Initialize Piscina with the worker file\nconst piscina = new Piscina({\n  filename: resolve(__dirname, 'worker.js')\n});\n\n// Function to create and run a task with progress tracking\nasync function task(a, b) {\n  // Create a progress bar for this task\n  const bar = new ProgressBar(':bar [:current/:total]', { total: b });\n\n  // Set up a MessageChannel for communication with the worker\n  const mc = new MessageChannel();\n\n  // Update the progress bar when a message is received from the worker\n  mc.port2.onmessage = () => bar.tick();\n\n  // Prevent the port from keeping the event loop alive\n  mc.port2.unref();\n\n  // Run the task in a worker, passing one port of the channel\n  return await piscina.run({ a, b, port: mc.port1 }, { transferList: [mc.port1] });\n}\n\n// Run multiple tasks concurrently\nPromise.all([\n  task(0, 50),\n  task(0, 25),\n  task(0, 90)\n]).catch((err) => console.error(err));\n"})})}),(0,t.jsxs)(i.A,{value:"Typescript",children:[(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import Piscina from "piscina";\nimport { resolve } from "path";\nimport { filename } from "./worker";\nimport ProgressBar from \'progress\';\n\nconst piscina = new Piscina({\n  filename: resolve(__dirname, "./workerWrapper.js"),\n  workerData: { fullpath: filename },\n});\nasync function task(a: number, b: number): Promise<void> {\n  // Create a progress bar for this task\n  const bar = new ProgressBar(\':bar [:current/:total]\', { total: b });\n\n  // Set up a MessageChannel for communication with the worker\n  const mc = new MessageChannel();\n\n  // Update the progress bar when a message is received from the worker\n  mc.port2.onmessage = () => bar.tick();\n\n  // Prevent the port from keeping the event loop alive\n  mc.port2.unref();\n\n  // Run the task in a worker, passing one port of the channel\n  await piscina.run({ a, b, port: mc.port1 }, { transferList: [mc.port1], name: \'progressTask\' });\n}\n\n// Run multiple tasks concurrently\nPromise.all([\n  task(0, 50),\n  task(0, 25),\n  task(0, 90)\n]).catch((err) => console.error(err));\n'})}),(0,t.jsx)(a.TF,{})]})]}),"\n",(0,t.jsxs)(r.p,{children:["In the worker file, the worker receives the ",(0,t.jsx)(r.code,{children:"port"})," as part of its input. As it processes the task, it sends messages through the port to indicate progress. When the task is complete, it closes the port."]}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(i.A,{value:"Javascript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",metastring:'title="worker.js"',children:"const { setTimeout } = require('timers/promises');\n\n// Worker function that simulates a time-consuming task\nmodule.exports = async ({ a, b, port }) => {\n  for (let n = a; n < b; n++) {\n    // Simulate some work\n    await setTimeout(10);\n\n    // Send a message to indicate progress\n    port.postMessage(n);\n  }\n\n  // Close the port when the task is complete\n  port.close();\n};\n"})})}),(0,t.jsx)(i.A,{value:"Typescript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="worker.ts"',children:"import { resolve } from \"path\";\nimport { setTimeout } from 'timers/promises';\n\n\nexport const filename = resolve(__filename);\ninterface TaskInput {\n  a: number;\n  b: number;\n  port: MessagePort;\n}\n\n// Worker function that simulates a time-consuming task\nexport async function progressTask({ a, b, port }: TaskInput): Promise<void> {\n  for (let n = a; n < b; n++) {\n    // Simulate some work\n    await setTimeout(10);\n\n    // Send a message to indicate progress\n    port.postMessage(n);\n  }\n\n  // Close the port when the task is complete\n  port.close();\n}\n"})})})]}),"\n",(0,t.jsx)(r.p,{children:"When you run this code, you should see progress bars for three concurrent tasks updating in real-time."}),"\n",(0,t.jsxs)(r.p,{children:["You can also check out this example on ",(0,t.jsx)(r.a,{href:"https://github.com/piscinajs/piscina/tree/current/examples/progress",children:"github"}),"."]})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>o});n(6540);var t=n(4164);const s={tabItem:"tabItem_Ymn6"};var a=n(4848);function o(e){let{children:r,hidden:n,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,o),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>j});var t=n(6540),s=n(4164),a=n(3104),o=n(6347),i=n(205),l=n(7485),c=n(1682),u=n(679);function p(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return p(e).map((e=>{let{props:{value:r,label:n,attributes:t,default:s}}=e;return{value:r,label:n,attributes:t,default:s}}))}(n);return function(e){const r=(0,c.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function h(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function m(e){let{queryString:r=!1,groupId:n}=e;const s=(0,o.W6)(),a=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,l.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(s.location.search);r.set(a,e),s.replace({...s.location,search:r.toString()})}),[a,s])]}function f(e){const{defaultValue:r,queryString:n=!1,groupId:s}=e,a=d(e),[o,l]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!h({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:a}))),[c,p]=m({queryString:n,groupId:s}),[f,g]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[s,a]=(0,u.Dv)(n);return[s,(0,t.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:s}),b=(()=>{const e=c??f;return h({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,a]),tabValues:a}}var g=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var k=n(4848);function v(e){let{className:r,block:n,selectedValue:t,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const r=e.currentTarget,n=l.indexOf(r),s=i[n].value;s!==t&&(c(r),o(s))},p=e=>{let r=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1];break}}r?.focus()};return(0,k.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},r),children:i.map((e=>{let{value:r,label:n,attributes:a}=e;return(0,k.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>l.push(e),onKeyDown:p,onClick:u,...a,className:(0,s.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":t===r}),children:n??r},r)}))})}function w(e){let{lazy:r,children:n,selectedValue:s}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=a.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,k.jsx)("div",{className:"margin-top--md",children:a.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==s})))})}function x(e){const r=f(e);return(0,k.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,k.jsx)(v,{...r,...e}),(0,k.jsx)(w,{...r,...e})]})}function j(e){const r=(0,g.A)();return(0,k.jsx)(x,{...e,children:p(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>i});var t=n(6540);const s={},a=t.createContext(s);function o(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);