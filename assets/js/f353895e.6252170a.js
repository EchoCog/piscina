"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8889],{5933:(e,n,t)=>{t.d(n,{TF:()=>a});var r=t(4848),s=t(8453);const a=()=>{const e={code:"code",pre:"pre",...(0,s.R)()};return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",title:"workerWrapper.js",children:'const { workerData } = require(\'worker_threads\');\n\nif (workerData.fullpath.endsWith(".ts")) {\nrequire("ts-node").register();\n}\nmodule.exports = require(workerData.fullpath);\n'})})}},7855:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=t(4848),s=t(8453),a=t(1470),o=t(9365),i=t(5933);const l={id:"Stream",sidebar_position:16},u=void 0,c={id:"examples/Stream",title:"Stream",description:"This example explains how Piscina can be used for more complex scenarios involving stream processing. Piscina allows for efficient data transfer between the main thread and worker threads using MessagePort.",source:"@site/docs/examples/stream.mdx",sourceDirName:"examples",slug:"/examples/Stream",permalink:"/examples/Stream",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{id:"Stream",sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Simple Async",permalink:"/examples/Simple Async"},next:{title:"Stream-In",permalink:"/examples/Stream-In"}},p={},d=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This example explains how Piscina can be used for more complex scenarios involving stream processing. Piscina allows for efficient data transfer between the main thread and worker threads using ",(0,r.jsx)(n.code,{children:"MessagePort"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The main script (",(0,r.jsx)(n.code,{children:"index.mjs"}),") sets up a pipeline that reads a file, processes its contents through a worker thread (converting text to uppercase), and outputs the result."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{value:"Javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="index.mjs"',children:"import Piscina from 'piscina';\nimport { MessagePortDuplex } from './stream.mjs';\nimport { createReadStream } from 'fs';\nimport { pipeline } from 'stream';\n\nconst pool = new Piscina({\n  filename: new URL('./worker.mjs', import.meta.url).href\n});\n\nconst { port1, port2 } = new MessageChannel();\n\npool.run(port2, { transferList: [port2] });\n\nconst duplex = new MessagePortDuplex(port1);\npipeline(\n  createReadStream(new URL('./index.mjs', import.meta.url).pathname),\n  duplex,\n  process.stdout,\n  (err) => { if (err) throw err; });\n"})})}),(0,r.jsxs)(o.A,{value:"Typescript",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:"import Piscina from 'piscina';\nimport { resolve } from 'path';\nimport { createReadStream } from 'fs';\nimport { pipeline } from 'stream';\nimport { MessageChannel } from 'worker_threads';\nimport { filename } from './worker';\nimport { MessagePortDuplex } from './stream';\n\nconst pool = new Piscina({\n  filename: resolve(__dirname, 'workerWrapper.js'),\n  workerData: { fullpath: filename },\n});\n\nconst { port1, port2 } = new MessageChannel();\n\npool.run(port2, { transferList: [port2] });\n\nconst duplex = new MessagePortDuplex(port1);\npipeline(\n  createReadStream(resolve(__dirname, \"index.ts\")),\n  duplex,\n  process.stdout,\n  (err: NodeJS.ErrnoException | null) => { if (err) throw err; }\n);\n"})}),(0,r.jsx)(i.TF,{})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The stream file defines custom stream classes that extend standard Node.js streams to work with ",(0,r.jsx)(n.code,{children:"MessagePort"}),". These classes enable efficient communication between the main thread and worker threads."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{value:"Javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="stream.mjs"',children:"import {\n  Writable,\n  Readable,\n  Duplex\n} from 'stream';\n\nconst kPort = Symbol('kPort');\n\nexport class MessagePortWritable extends Writable {\n  constructor (port, options) {\n    super(options);\n    this[kPort] = port;\n  }\n\n  _write (buf, _, cb) {\n    this[kPort].postMessage(buf, [buf.buffer]);\n    cb();\n  }\n\n  _writev (data, cb) {\n    const chunks = new Array(data.length);\n    const transfers = new Array(data.length);\n    for (let n = 0; n < data.length; n++) {\n      chunks[n] = data[n].chunk;\n      transfers[n] = data[n].chunk.buffs;\n    }\n    this[kPort].postMessage(chunks, transfers);\n    cb();\n  }\n\n  _final (cb) {\n    this[kPort].postMessage(null);\n    cb();\n  }\n\n  _destroy (err, cb) {\n    this[kPort].close(() => cb(err));\n  }\n\n  unref () { this[kPort].unref(); return this; }\n  ref () { this[kPort].ref(); return this; }\n}\n\nexport class MessagePortReadable extends Readable {\n  constructor (port, options) {\n    super(options);\n    this[kPort] = port;\n    port.onmessage = ({ data }) => this.push(data);\n  }\n\n  _read () {\n    this[kPort].start();\n  }\n\n  _destroy (err, cb) {\n    this[kPort].close(() => {\n      this[kPort].onmessage = undefined;\n      cb(err);\n    });\n  }\n\n  unref () { this[kPort].unref(); return this; }\n  ref () { this[kPort].ref(); return this; }\n}\n\nexport class MessagePortDuplex extends Duplex {\n  constructor (port, options) {\n    super(options);\n    this[kPort] = port;\n    port.onmessage = ({ data }) => this.push(data);\n  }\n\n  _read () {\n    this[kPort].start();\n  }\n\n  _write (buf, _, cb) {\n    this[kPort].postMessage(buf, [buf.buffer]);\n    cb();\n  }\n\n  _writev (data, cb) {\n    const chunks = new Array(data.length);\n    const transfers = new Array(data.length);\n    for (let n = 0; n < data.length; n++) {\n      chunks[n] = data[n].chunk;\n      transfers[n] = data[n].chunk.buffs;\n    }\n    this[kPort].postMessage(chunks, transfers);\n    cb();\n  }\n\n  _final (cb) {\n    this[kPort].postMessage(null);\n    cb();\n  }\n\n  _destroy (err, cb) {\n    this[kPort].close(() => {\n      this[kPort].onmessage = undefined;\n      cb(err);\n    });\n  }\n\n  unref () { this[kPort].unref(); return this; }\n  ref () { this[kPort].ref(); return this; }\n}\n"})})}),(0,r.jsx)(o.A,{value:"Typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="stream.ts"',children:"import {\n  Writable,\n  Readable,\n  Duplex,\n  WritableOptions,\n  ReadableOptions,\n  DuplexOptions\n} from 'stream';\nimport { MessagePort } from 'worker_threads';\n\nconst kPort = Symbol('kPort');\n\nexport class MessagePortWritable extends Writable {\n  private [kPort]: MessagePort;\n\n  constructor(port: MessagePort, options?: WritableOptions) {\n    super(options);\n    this[kPort] = port;\n  }\n\n  _write(buf: Buffer, _: string, cb: (error?: Error | null) => void): void {\n    this[kPort].postMessage(buf, [buf.buffer]);\n    cb();\n  }\n\n  // ... (other methods)\n}\n\nexport class MessagePortReadable extends Readable {\n  private [kPort]: MessagePort;\n\n  constructor(port: MessagePort, options?: ReadableOptions) {\n    super(options);\n    this[kPort] = port;\n    port.onmessage = ({ data }) => this.push(data);\n  }\n\n  // ... (other methods)\n}\n\nexport class MessagePortDuplex extends Duplex {\n  private [kPort]: MessagePort;\n\n  constructor(port: MessagePort, options?: DuplexOptions) {\n    super(options);\n    this[kPort] = port;\n    port.onmessage = ({ data }) => this.push(data);\n  }\n\n  // ... (other methods)\n}\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["The worker script defines a function that processes data through a ",(0,r.jsx)(n.code,{children:"MessagePortDuplex"})," stream, converting incoming text to uppercase and writing it back."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{value:"Javascript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="worker.mjs"',children:"import { MessagePortDuplex } from './stream.mjs';\n\nexport default function (port) {\n  let res;\n  const ret = new Promise((resolve) => {\n    res = resolve;\n  });\n  const duplex = new MessagePortDuplex(port);\n  duplex.setEncoding('utf8');\n  duplex.on('data', (chunk) => duplex.write(chunk.toUpperCase()));\n  duplex.on('end', () => {\n    duplex.end();\n    res();\n  });\n  return ret;\n}\n"})})}),(0,r.jsx)(o.A,{value:"Typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="worker.ts"',children:"import { MessagePortDuplex } from './stream';\nimport { MessagePort } from 'worker_threads';\n\nexport default function (port: MessagePort): Promise<void> {\n  let res: () => void;\n  const ret = new Promise<void>((resolve) => {\n    res = resolve;\n  });\n  const duplex = new MessagePortDuplex(port);\n  duplex.setEncoding('utf8');\n  duplex.on('data', (chunk: string) => duplex.write(chunk.toUpperCase()));\n  duplex.on('end', () => {\n    duplex.end();\n    res();\n  });\n  return ret;\n}\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["You can also check out this example on ",(0,r.jsx)(n.a,{href:"https://github.com/piscinajs/piscina/tree/current/examples/stream",children:"github"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var r=t(4164);const s={tabItem:"tabItem_Ymn6"};var a=t(4848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,o),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>P});var r=t(6540),s=t(4164),a=t(3104),o=t(6347),i=t(205),l=t(7485),u=t(1682),c=t(679);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=d(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[u,p]=m({queryString:t,groupId:s}),[f,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,c.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),b=(()=>{const e=u??f;return h({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),x(e)}),[p,x,a]),tabValues:a}}var x=t(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function k(e){let{className:n,block:t,selectedValue:r,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),s=i[t].value;s!==r&&(u(n),o(s))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:p,onClick:c,...a,className:(0,s.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function w(e){const n=f(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,g.jsx)(k,{...n,...e}),(0,g.jsx)(v,{...n,...e})]})}function P(e){const n=(0,x.A)();return(0,g.jsx)(w,{...e,children:p(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);